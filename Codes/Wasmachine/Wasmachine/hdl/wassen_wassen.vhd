-- VHDL Entity Wasmachine.Wassen.interface
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 15:41:40 11/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Wassen IS
   PORT( 
      aan_uit           : IN     std_logic;
      afpompen_ready    : IN     std_logic;
      centrifugeerkeuze : IN     std_logic_vector (1 DOWNTO 0);
      clk               : IN     std_logic;
      go_wassen         : IN     std_logic;
      kuip_leeg         : IN     std_logic;
      programmakeuze    : IN     std_logic_vector (1 DOWNTO 0);
      t_hoog            : IN     std_logic;
      t_laag            : IN     std_logic;
      toevoer_ready     : IN     std_logic;
      trommel_ready     : IN     std_logic;
      verwarmen_ready   : IN     std_logic;
      w_hoog            : IN     std_logic;
      w_laag            : IN     std_logic;
      go_afpompen       : OUT    std_logic;
      go_toevoer        : OUT    std_logic;
      go_trommel        : OUT    std_logic;
      go_verwarmen      : OUT    std_logic;
      trommel_keuze     : OUT    std_logic;
      wassen_ready      : OUT    std_logic;
      wassen_status     : OUT    std_logic_vector (2 DOWNTO 0)
   );

-- Declarations

END Wassen ;

--
-- VHDL Architecture Wasmachine.Wassen.Wassen
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 11:53:17 21/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE Wassen OF Wassen IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s3,
      keuze,
      s8,
      s5,
      s14,
      s12,
      sSpoelen,
      w_trommel2,
      wassen1,
      w_trommel1,
      s_t_hoog1,
      s_verwarm1,
      s23,
      s24,
      s15,
      s19,
      centr_0,
      centr_1,
      eind,
      s2,
      s9,
      s6
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      aan_uit
   )
   -----------------------------------------------------------------
   BEGIN
      IF (aan_uit = '0') THEN
         current_state <= s0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      afpompen_ready,
      centrifugeerkeuze,
      current_state,
      go_wassen,
      kuip_leeg,
      programmakeuze,
      t_hoog,
      t_laag,
      toevoer_ready,
      trommel_ready,
      verwarmen_ready
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (go_wassen = '0') THEN 
               next_state <= s0;
            ELSIF (go_wassen = '1') THEN 
               next_state <= s2;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (centrifugeerkeuze = "10" OR centrifugeerkeuze = "01") THEN 
               next_state <= s3;
            ELSIF (programmakeuze = "00") THEN 
               next_state <= keuze;
            ELSIF (programmakeuze = "11") THEN 
               next_state <= s1;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s3 => 
            next_state <= s8;
         WHEN keuze => 
            IF (programmakeuze /= "00" AND go_wassen = '1') THEN 
               next_state <= s8;
            ELSE
               next_state <= keuze;
            END IF;
         WHEN s8 => 
            IF (afpompen_ready = '1') THEN 
               next_state <= s8;
            ELSIF (afpompen_ready = '0') THEN 
               next_state <= s5;
            ELSE
               next_state <= s8;
            END IF;
         WHEN s5 => 
            IF (afpompen_ready = '0') THEN 
               next_state <= s5;
            ELSIF ((afpompen_ready = '1') AND (programmakeuze = "01" OR centrifugeerkeuze = "00")) THEN 
               next_state <= s0;
            ELSIF ((afpompen_ready = '1') AND (centrifugeerkeuze = "10" OR centrifugeerkeuze = "01")) THEN 
               next_state <= centr_0;
            ELSE
               next_state <= s5;
            END IF;
         WHEN s14 => 
            IF (toevoer_ready = '0') THEN 
               next_state <= s12;
            ELSIF (toevoer_ready = '1') THEN 
               next_state <= s14;
            ELSE
               next_state <= s14;
            END IF;
         WHEN s12 => 
            IF (toevoer_ready = '1') THEN 
               next_state <= w_trommel2;
            ELSIF (toevoer_ready = '0') THEN 
               next_state <= s12;
            ELSE
               next_state <= s12;
            END IF;
         WHEN sSpoelen => 
            IF (trommel_ready = '0') THEN 
               next_state <= sSpoelen;
            ELSIF (trommel_ready = '1') THEN 
               next_state <= s1;
            ELSE
               next_state <= sSpoelen;
            END IF;
         WHEN w_trommel2 => 
            IF (trommel_ready = '0') THEN 
               next_state <= sSpoelen;
            ELSIF (trommel_ready = '1') THEN 
               next_state <= w_trommel2;
            ELSE
               next_state <= w_trommel2;
            END IF;
         WHEN wassen1 => 
            IF (t_laag = '1') THEN 
               next_state <= s_verwarm1;
            ELSIF (trommel_ready = '0') THEN 
               next_state <= wassen1;
            ELSIF (trommel_ready = '1') THEN 
               next_state <= s15;
            ELSE
               next_state <= wassen1;
            END IF;
         WHEN w_trommel1 => 
            IF (trommel_ready = '0') THEN 
               next_state <= wassen1;
            ELSIF (trommel_ready = '1') THEN 
               next_state <= w_trommel1;
            ELSE
               next_state <= w_trommel1;
            END IF;
         WHEN s_t_hoog1 => 
            IF (t_hoog = '1' OR trommel_ready = '1') THEN 
               next_state <= wassen1;
            ELSE
               next_state <= s_t_hoog1;
            END IF;
         WHEN s_verwarm1 => 
            IF (verwarmen_ready = '0') THEN 
               next_state <= s_t_hoog1;
            ELSIF (trommel_ready = '1') THEN 
               next_state <= s15;
            ELSE
               next_state <= s_verwarm1;
            END IF;
         WHEN s23 => 
            IF (toevoer_ready = '0') THEN 
               next_state <= s24;
            ELSIF (toevoer_ready = '1') THEN 
               next_state <= s23;
            ELSE
               next_state <= s23;
            END IF;
         WHEN s24 => 
            IF (toevoer_ready = '0') THEN 
               next_state <= s24;
            ELSIF (toevoer_ready = '1') THEN 
               next_state <= w_trommel1;
            ELSE
               next_state <= s24;
            END IF;
         WHEN s15 => 
            IF (afpompen_ready = '1') THEN 
               next_state <= s15;
            ELSIF (afpompen_ready = '0') THEN 
               next_state <= s19;
            ELSE
               next_state <= s15;
            END IF;
         WHEN s19 => 
            IF (afpompen_ready = '0') THEN 
               next_state <= s19;
            ELSIF (afpompen_ready = '1') THEN 
               next_state <= s14;
            ELSE
               next_state <= s19;
            END IF;
         WHEN centr_0 => 
            IF (trommel_ready = '0') THEN 
               next_state <= centr_1;
            ELSE
               next_state <= centr_0;
            END IF;
         WHEN centr_1 => 
            IF (trommel_ready = '0') THEN 
               next_state <= centr_1;
            ELSIF (trommel_ready = '1') THEN 
               next_state <= eind;
            ELSE
               next_state <= centr_1;
            END IF;
         WHEN eind => 
            next_state <= s0;
         WHEN s2 => 
            IF (kuip_leeg = '1') THEN 
               next_state <= s23;
            ELSIF (kuip_leeg = '0') THEN 
               next_state <= s9;
            ELSE
               next_state <= s2;
            END IF;
         WHEN s9 => 
            IF (afpompen_ready = '1') THEN 
               next_state <= s9;
            ELSIF (afpompen_ready = '0') THEN 
               next_state <= s6;
            ELSE
               next_state <= s9;
            END IF;
         WHEN s6 => 
            IF (afpompen_ready = '0') THEN 
               next_state <= s6;
            ELSIF ((afpompen_ready = '1') AND (kuip_leeg = '1')) THEN 
               next_state <= s23;
            ELSIF ((afpompen_ready = '1') AND (kuip_leeg = '0')) THEN 
               next_state <= s9;
            ELSE
               next_state <= s6;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '1';
            wassen_status <= "000";
         WHEN s1 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "100";
         WHEN s3 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "100";
         WHEN keuze => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "101";
         WHEN s8 => 
            go_afpompen <= '1';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "011" ;
         WHEN s5 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "011";
         WHEN s14 => 
            go_afpompen <= '0';
            go_toevoer <= '1';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "010";
         WHEN s12 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "010";
         WHEN sSpoelen => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "100";
         WHEN w_trommel2 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '1';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "010";
         WHEN wassen1 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "010";
         WHEN w_trommel1 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '1';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "001";
         WHEN s_t_hoog1 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "010";
         WHEN s_verwarm1 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '1';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "010";
         WHEN s23 => 
            go_afpompen <= '0';
            go_toevoer <= '1';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "000";
         WHEN s24 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "010";
         WHEN s15 => 
            go_afpompen <= '1';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "010";
         WHEN s19 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "010";
         WHEN centr_0 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '1';
            go_verwarmen <= '0';
            trommel_keuze <= '1';
            wassen_ready <= '0';
            wassen_status <= "011";
         WHEN centr_1 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "110";
         WHEN eind => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '1';
            wassen_status <= "000";
         WHEN s2 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "000";
         WHEN s9 => 
            go_afpompen <= '1';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "011" ;
         WHEN s6 => 
            go_afpompen <= '0';
            go_toevoer <= '0';
            go_trommel <= '0';
            go_verwarmen <= '0';
            trommel_keuze <= '0';
            wassen_ready <= '0';
            wassen_status <= "011";
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END Wassen;
