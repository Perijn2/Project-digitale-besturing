-- VHDL Entity Wasmachine.Trommel.interface
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 23:03:54 05/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Trommel IS
   PORT( 
      aan_uit           : IN     std_logic;
      centrifugeerkeuze : IN     std_logic_vector (1 DOWNTO 0);
      clk               : IN     std_logic;
      go_trommel        : IN     std_logic;
      trommel_keuze     : IN     std_logic;
      motor             : OUT    std_logic_vector (2 DOWNTO 0) := "000";
      trommel_ready     : OUT    std_logic                     := '0'
   );

-- Declarations

END Trommel ;

--
-- VHDL Architecture Wasmachine.Trommel.Trommel
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 23:03:54 05/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE Trommel OF Trommel IS

   -- Architecture Declarations
   SIGNAL Richting : std_logic;  

   TYPE STATE_TYPE IS (
      idle,
      standkeuze,
      snel200,
      snel800,
      snelheidhoger2,
      snelheidhoger3,
      Verander,
      snel1200,
      s0,
      s1,
      start,
      s3
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(5 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(5 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_snelheidhoger2 : std_logic;
   SIGNAL csm_to_snelheidhoger3 : std_logic;
   SIGNAL csm_to_s0 : std_logic;
   SIGNAL csm_to_s1 : std_logic;
   SIGNAL csm_to_s3 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      aan_uit
   )
   -----------------------------------------------------------------
   BEGIN
      IF (aan_uit = '0') THEN
         current_state <= idle;
         csm_timer <= (OTHERS => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      Richting,
      centrifugeerkeuze,
      csm_timeout,
      current_state,
      go_trommel
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_snelheidhoger2 <= '0';
      csm_to_snelheidhoger3 <= '0';
      csm_to_s0 <= '0';
      csm_to_s1 <= '0';
      csm_to_s3 <= '0';
      CASE current_state IS
         WHEN idle => 
            IF (go_trommel = '1') THEN 
               next_state <= standkeuze;
            ELSIF (go_trommel = '0') THEN 
               next_state <= idle;
            ELSE
               next_state <= idle;
            END IF;
         WHEN standkeuze => 
            next_state <= start;
         WHEN snel200 => 
            IF (Richting = '0') THEN 
               next_state <= snelheidhoger2;
               csm_to_snelheidhoger2 <= '1';
            ELSIF (Richting = '1') THEN 
               next_state <= s1;
               csm_to_s1 <= '1';
            ELSE
               next_state <= snel200;
            END IF;
         WHEN snel800 => 
            IF (Richting = '0') THEN 
               next_state <= snelheidhoger3;
               csm_to_snelheidhoger3 <= '1';
            ELSIF (Richting = '1') THEN 
               next_state <= snelheidhoger2;
               csm_to_snelheidhoger2 <= '1';
            ELSE
               next_state <= snel800;
            END IF;
         WHEN snelheidhoger2 => 
            IF (csm_timeout = '1' AND (Richting = '0')) THEN 
               next_state <= snel800;
            ELSIF (csm_timeout = '1' AND (Richting = '1')) THEN 
               next_state <= snel200;
            ELSE
               next_state <= snelheidhoger2;
            END IF;
         WHEN snelheidhoger3 => 
            IF (csm_timeout = '1' AND (centrifugeerkeuze = "01" AND
                Richting = '0')) THEN 
               next_state <= s3;
               csm_to_s3 <= '1';
            ELSIF (csm_timeout = '1' AND (centrifugeerkeuze = "10" AND
                   Richting = '0')) THEN 
               next_state <= snel1200;
            ELSE
               next_state <= snelheidhoger3;
            END IF;
         WHEN Verander => 
            IF (centrifugeerkeuze = "10") THEN 
               next_state <= snel800;
            ELSIF (centrifugeerkeuze = "01") THEN 
               next_state <= snel200;
            ELSE
               next_state <= Verander;
            END IF;
         WHEN snel1200 => 
            IF (Richting = '0') THEN 
               next_state <= s0;
               csm_to_s0 <= '1';
            ELSE
               next_state <= snel1200;
            END IF;
         WHEN s0 => 
            IF (csm_timeout = '1' AND (Richting = '0')) THEN 
               next_state <= s3;
               csm_to_s3 <= '1';
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (csm_timeout = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= s1;
            END IF;
         WHEN start => 
            next_state <= snel200;
         WHEN s3 => 
            IF (csm_timeout = '1') THEN 
               next_state <= Verander;
            ELSE
               next_state <= s3;
            END IF;
         WHEN OTHERS =>
            next_state <= idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN idle => 
            trommel_ready <=  '1' ;
         WHEN standkeuze => 
            trommel_ready <= '0';
            motor <= "000" ;
         WHEN snel200 => 
            motor <= "011" ;
         WHEN snel800 => 
            motor <= "010" ;
         WHEN Verander => 
            Richting <= '1' ;
         WHEN snel1200 => 
            motor <= "110";
         WHEN start => 
            Richting <= '0';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_snelheidhoger2,
      csm_to_snelheidhoger3,
      csm_to_s0,
      csm_to_s1,
      csm_to_s3
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_snelheidhoger2 = '1') THEN
         csm_next_timer <= "000001"; -- no cycles(2)-1=1
      ELSIF (csm_to_snelheidhoger3 = '1') THEN
         csm_next_timer <= "000001"; -- no cycles(2)-1=1
      ELSIF (csm_to_s0 = '1') THEN
         csm_next_timer <= "000001"; -- no cycles(2)-1=1
      ELSIF (csm_to_s1 = '1') THEN
         csm_next_timer <= "000001"; -- no cycles(2)-1=1
      ELSIF (csm_to_s3 = '1') THEN
         csm_next_timer <= "111011"; -- no cycles(60)-1=59
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END Trommel;
