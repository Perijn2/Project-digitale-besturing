-- VHDL Entity Wasmachine.Trommel.interface
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 11:15:30 11/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Trommel IS
   PORT( 
      aan_uit           : IN     std_logic                     := '0';
      centrifugeerkeuze : IN     std_logic_vector (1 DOWNTO 0);
      clk               : IN     std_logic;
      go_trommel        : IN     std_logic;
      trommel_keuze     : IN     std_logic;
      motor             : OUT    std_logic_vector (2 DOWNTO 0) := "000";
      trommel_ready     : OUT    std_logic                     := '0'
   );

-- Declarations

END Trommel ;

--
-- VHDL Architecture Wasmachine.Trommel.Trommel
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 12:40:07 17/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE Trommel OF Trommel IS

   -- Architecture Declarations
   SIGNAL Revoluties : integer RANGE 15 DOWNTO 0 := 0;  

   TYPE STATE_TYPE IS (
      idle,
      standkeuze,
      snelheidhoger2,
      snelheidhoger3,
      s0,
      start,
      s3,
      s4,
      s6,
      s5,
      s8,
      s7,
      s1,
      s9,
      s10
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(5 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(5 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_snelheidhoger2 : std_logic;
   SIGNAL csm_to_snelheidhoger3 : std_logic;
   SIGNAL csm_to_s0 : std_logic;
   SIGNAL csm_to_s3 : std_logic;
   SIGNAL csm_to_s6 : std_logic;
   SIGNAL csm_to_s5 : std_logic;
   SIGNAL csm_to_s8 : std_logic;
   SIGNAL csm_to_s1 : std_logic;
   SIGNAL csm_to_s9 : std_logic;
   SIGNAL csm_to_s10 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      aan_uit
   )
   -----------------------------------------------------------------
   BEGIN
      IF (aan_uit = '0') THEN
         current_state <= idle;
         csm_timer <= (OTHERS => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;

         -- Combined Actions
         CASE current_state IS
            WHEN idle => 
               Revoluties <= 0;
            WHEN standkeuze => 
               Revoluties <= 0;
            WHEN snelheidhoger2 => 
               Revoluties <= 0;
            WHEN snelheidhoger3 => 
               Revoluties <= 0;
            WHEN s0 => 
               Revoluties <= 0;
            WHEN start => 
               Revoluties <= 0;
            WHEN s3 => 
               Revoluties <= 0;
            WHEN s4 => 
               Revoluties <= 0;
            WHEN s6 => 
               Revoluties <= Revoluties ;
            WHEN s5 => 
               Revoluties <= Revoluties ;
            WHEN s8 => 
               Revoluties <= Revoluties ;
               IF (csm_timeout = '1') THEN 
                  Revoluties <= Revoluties + 1 ;
               END IF;
            WHEN s7 => 
               Revoluties <= 0;
            WHEN s1 => 
               Revoluties <= 0;
            WHEN s9 => 
               Revoluties <= 0;
            WHEN s10 => 
               Revoluties <= Revoluties ;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      Revoluties,
      centrifugeerkeuze,
      csm_timeout,
      current_state,
      go_trommel,
      trommel_keuze
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_snelheidhoger2 <= '0';
      csm_to_snelheidhoger3 <= '0';
      csm_to_s0 <= '0';
      csm_to_s3 <= '0';
      csm_to_s6 <= '0';
      csm_to_s5 <= '0';
      csm_to_s8 <= '0';
      csm_to_s1 <= '0';
      csm_to_s9 <= '0';
      csm_to_s10 <= '0';
      CASE current_state IS
         WHEN idle => 
            IF (go_trommel = '1') THEN 
               next_state <= standkeuze;
            ELSIF (go_trommel = '0') THEN 
               next_state <= idle;
            ELSE
               next_state <= idle;
            END IF;
         WHEN standkeuze => 
            IF (trommel_keuze = '1') THEN 
               next_state <= start;
            ELSIF (trommel_keuze = '0') THEN 
               next_state <= s4;
            ELSE
               next_state <= standkeuze;
            END IF;
         WHEN snelheidhoger2 => 
            IF (csm_timeout = '1') THEN 
               next_state <= snelheidhoger3;
               csm_to_snelheidhoger3 <= '1';
            ELSE
               next_state <= snelheidhoger2;
            END IF;
         WHEN snelheidhoger3 => 
            IF (csm_timeout = '1' AND (centrifugeerkeuze = "01")) THEN 
               next_state <= s3;
               csm_to_s3 <= '1';
            ELSIF (csm_timeout = '1' AND (centrifugeerkeuze = "10")) THEN 
               next_state <= s0;
               csm_to_s0 <= '1';
            ELSE
               next_state <= snelheidhoger3;
            END IF;
         WHEN s0 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s1;
               csm_to_s1 <= '1';
            ELSE
               next_state <= s0;
            END IF;
         WHEN start => 
            next_state <= snelheidhoger2;
            csm_to_snelheidhoger2 <= '1';
         WHEN s3 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s9;
               csm_to_s9 <= '1';
            ELSE
               next_state <= s3;
            END IF;
         WHEN s4 => 
            next_state <= s6;
            csm_to_s6 <= '1';
         WHEN s6 => 
            IF (csm_timeout = '1' AND (Revoluties >= 5)) THEN 
               next_state <= s7;
            ELSIF (csm_timeout = '1') THEN 
               next_state <= s5;
               csm_to_s5 <= '1';
            ELSE
               next_state <= s6;
            END IF;
         WHEN s5 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s10;
               csm_to_s10 <= '1';
            ELSE
               next_state <= s5;
            END IF;
         WHEN s8 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s6;
               csm_to_s6 <= '1';
            ELSE
               next_state <= s8;
            END IF;
         WHEN s7 => 
            next_state <= idle;
         WHEN s1 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s9;
               csm_to_s9 <= '1';
            ELSE
               next_state <= s1;
            END IF;
         WHEN s9 => 
            IF (csm_timeout = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= s9;
            END IF;
         WHEN s10 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s8;
               csm_to_s8 <= '1';
            ELSE
               next_state <= s10;
            END IF;
         WHEN OTHERS =>
            next_state <= idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN idle => 
            motor <= "000";
            trommel_ready <=  '1' ;
         WHEN standkeuze => 
            motor <= "000";
            trommel_ready <=  '0' ;
         WHEN snelheidhoger2 => 
            motor <= "011";
            trommel_ready <=  '0' ;
         WHEN snelheidhoger3 => 
            motor <= "010" ;
            trommel_ready <=  '0' ;
         WHEN s0 => 
            motor <= "110" ;
            trommel_ready <=  '0' ;
         WHEN start => 
            motor <= "000";
            trommel_ready <=  '0' ;
         WHEN s3 => 
            motor <= "010" ;
            trommel_ready <=  '0' ;
         WHEN s4 => 
            motor <= "000";
            trommel_ready <=  '0' ;
         WHEN s6 => 
            motor <= "000";
            trommel_ready <=  '0' ;
         WHEN s5 => 
            motor <= "001";
            trommel_ready <=  '0' ;
         WHEN s8 => 
            motor <= "011";
            trommel_ready <=  '0' ;
         WHEN s7 => 
            motor <= "000";
            trommel_ready <=  '0' ;
         WHEN s1 => 
            motor <= "010" ;
            trommel_ready <=  '0' ;
         WHEN s9 => 
            motor <= "011";
            trommel_ready <=  '0' ;
         WHEN s10 => 
            motor <= "000";
            trommel_ready <=  '0' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_snelheidhoger2,
      csm_to_snelheidhoger3,
      csm_to_s0,
      csm_to_s3,
      csm_to_s6,
      csm_to_s5,
      csm_to_s8,
      csm_to_s1,
      csm_to_s9,
      csm_to_s10
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_snelheidhoger2 = '1') THEN
         csm_next_timer <= "000001"; -- no cycles(2)-1=1
      ELSIF (csm_to_snelheidhoger3 = '1') THEN
         csm_next_timer <= "000001"; -- no cycles(2)-1=1
      ELSIF (csm_to_s0 = '1') THEN
         csm_next_timer <= "111011"; -- no cycles(60)-1=59
      ELSIF (csm_to_s3 = '1') THEN
         csm_next_timer <= "111011"; -- no cycles(60)-1=59
      ELSIF (csm_to_s6 = '1') THEN
         csm_next_timer <= "000100"; -- no cycles(5)-1=4
      ELSIF (csm_to_s5 = '1') THEN
         csm_next_timer <= "000100"; -- no cycles(5)-1=4
      ELSIF (csm_to_s8 = '1') THEN
         csm_next_timer <= "000100"; -- no cycles(5)-1=4
      ELSIF (csm_to_s1 = '1') THEN
         csm_next_timer <= "000001"; -- no cycles(2)-1=1
      ELSIF (csm_to_s9 = '1') THEN
         csm_next_timer <= "000001"; -- no cycles(2)-1=1
      ELSIF (csm_to_s10 = '1') THEN
         csm_next_timer <= "000100"; -- no cycles(5)-1=4
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END Trommel;
