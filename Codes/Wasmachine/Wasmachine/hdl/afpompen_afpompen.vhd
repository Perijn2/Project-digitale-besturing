-- VHDL Entity Wasmachine.Afpompen.interface
--
-- Created:
--          by - jesse.UNKNOWN (MSI)
--          at - 13:31:33 26-02-2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Afpompen IS
   PORT( 
      aan_uit        : IN     std_logic;
      clk            : IN     std_logic;
      go_afpompen    : IN     std_logic;
      kuip_leeg      : IN     std_logic;
      afpompen_ready : OUT    std_logic;
      pomp_aan       : OUT    std_logic
   );

-- Declarations

END Afpompen ;

--
-- VHDL Architecture Wasmachine.Afpompen.Afpompen
--
-- Created:
--          by - jesse.UNKNOWN (MSI)
--          at - 14:47:20 26-02-2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE Afpompen OF Afpompen IS

   TYPE STATE_TYPE IS (
      idle,
      afpompen,
      s_leeg
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      aan_uit
   )
   -----------------------------------------------------------------
   BEGIN
      IF (aan_uit = '0') THEN
         current_state <= idle;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      go_afpompen,
      kuip_leeg
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN idle => 
            IF (go_afpompen = '1') THEN 
               next_state <= afpompen;
            ELSIF (go_afpompen = '0') THEN 
               next_state <= idle;
            ELSE
               next_state <= idle;
            END IF;
         WHEN afpompen => 
            IF (kuip_leeg = '1') THEN 
               next_state <= s_leeg;
            ELSIF (kuip_leeg = '0') THEN 
               next_state <= afpompen;
            ELSE
               next_state <= afpompen;
            END IF;
         WHEN s_leeg => 
            next_state <= idle;
         WHEN OTHERS =>
            next_state <= idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN idle => 
            afpompen_ready <= '1';
         WHEN afpompen => 
            afpompen_ready <= '0' ;
            pomp_aan <= '1' ;
         WHEN s_leeg => 
            pomp_aan <= '0' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END Afpompen;
