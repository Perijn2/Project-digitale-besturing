-- VHDL Entity Wasmachine.Master.interface
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 23:02:14 05/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Master IS
   PORT( 
      aan_uit       : IN     std_logic;
      clk           : IN     std_logic;
      deur_dicht    : IN     std_logic;
      start         : IN     std_logic;
      w_hoog        : IN     std_logic;
      w_laag        : IN     std_logic;
      wassen_ready  : IN     std_logic;
      wassen_status : IN     std_logic_vector (2 DOWNTO 0);
      deur_grendel  : OUT    std_logic;
      go_wassen     : OUT    std_logic                     := '0';
      led_aan       : OUT    std_logic                     := '0';
      led_start     : OUT    std_logic                     := '0';
      led_status    : OUT    std_logic_vector (2 DOWNTO 0) := "000";
      led_vuldeur   : OUT    std_logic                     := '0'
   );

-- Declarations

END Master ;

--
-- VHDL Architecture Wasmachine.Master.Master
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 23:02:14 05/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE Master OF Master IS

   TYPE STATE_TYPE IS (
      idle,
      proces,
      wait_s,
      started,
      pow_on,
      L_status,
      prg_done,
      unlock
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      aan_uit
   )
   -----------------------------------------------------------------
   BEGIN
      IF (aan_uit = '0') THEN
         current_state <= idle;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      aan_uit,
      current_state,
      deur_dicht,
      start,
      w_hoog,
      w_laag,
      wassen_ready
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN idle => 
            IF (aan_uit = '1') THEN 
               next_state <= pow_on;
            ELSIF (aan_uit = '0') THEN 
               next_state <= idle;
            ELSE
               next_state <= idle;
            END IF;
         WHEN proces => 
            IF (wassen_ready = '1') THEN 
               next_state <= wait_s;
            ELSIF (start = '0') THEN 
               next_state <= idle;
            ELSIF (start = '1') THEN 
               next_state <= proces;
            ELSE
               next_state <= proces;
            END IF;
         WHEN wait_s => 
            IF (wassen_ready = '0') THEN 
               next_state <= started;
            ELSIF (wassen_ready = '1') THEN 
               next_state <= wait_s;
            ELSE
               next_state <= wait_s;
            END IF;
         WHEN started => 
            IF (wassen_ready = '0') THEN 
               next_state <= L_status;
            ELSE
               next_state <= started;
            END IF;
         WHEN pow_on => 
            IF (start = '1' AND
                deur_dicht = '1') THEN 
               next_state <= proces;
            ELSIF (deur_dicht = '0' AND
                   w_laag = '0' AND
                   w_hoog = '0') THEN 
               next_state <= unlock;
            ELSIF (aan_uit = '0') THEN 
               next_state <= pow_on;
            ELSE
               next_state <= pow_on;
            END IF;
         WHEN L_status => 
            IF (wassen_ready = '1') THEN 
               next_state <= prg_done;
            ELSIF (wassen_ready = '0') THEN 
               next_state <= L_status;
            ELSE
               next_state <= L_status;
            END IF;
         WHEN prg_done => 
            next_state <= idle;
         WHEN unlock => 
            next_state <= pow_on;
         WHEN OTHERS =>
            next_state <= idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      aan_uit,
      current_state,
      wassen_status
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN idle => 
            led_aan <= aan_uit ;
         WHEN proces => 
            deur_grendel <= '1';
            led_vuldeur <= '1';
            led_start <= '1' ;
         WHEN wait_s => 
            go_wassen <= '1';
         WHEN started => 
            go_wassen <= '0' ;
         WHEN pow_on => 
            led_aan <= '1';
         WHEN L_status => 
            led_status <= wassen_status;
         WHEN prg_done => 
            led_start <= '0' ;
            led_status <= "000";
         WHEN unlock => 
            led_vuldeur <= '0' ;
            deur_grendel <= '0' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END Master;
