-- VHDL Entity Wasmachine.Verwarming.interface
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 23:03:25 05/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Verwarming IS
   PORT( 
      aan_uit         : IN     std_logic;
      clk             : IN     std_logic;
      go_verwarmen    : IN     std_logic;
      t_hoog          : IN     std_logic;
      t_laag          : IN     std_logic;
      w_laag          : IN     std_logic;
      verwarmen       : OUT    std_logic  := '0';
      verwarmen_ready : OUT    std_logic  := '0'
   );

-- Declarations

END Verwarming ;

--
-- VHDL Architecture Wasmachine.Verwarming.Verwarming
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 21:44:22 16/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE Verwarming OF Verwarming IS

   TYPE STATE_TYPE IS (
      s0,
      s1
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      aan_uit
   )
   -----------------------------------------------------------------
   BEGIN
      IF (aan_uit = '0') THEN
         current_state <= s0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      go_verwarmen,
      t_hoog,
      w_laag
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (go_verwarmen = '1' AND w_laag = '1') THEN 
               next_state <= s1;
            ELSIF (go_verwarmen = '0' OR w_laag = '0') THEN 
               next_state <= s0;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (t_hoog = '1' OR w_laag = '0') THEN 
               next_state <= s0;
            ELSIF (t_hoog = '0') THEN 
               next_state <= s1;
            ELSE
               next_state <= s1;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            verwarmen_ready <= '1' ;
            verwarmen <= '0' ;
         WHEN s1 => 
            verwarmen_ready <= '0' ;
            verwarmen <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END Verwarming;
