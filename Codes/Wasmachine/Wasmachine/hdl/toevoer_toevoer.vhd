-- VHDL Entity Wasmachine.Toevoer.interface
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 15:15:48 25/02/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Toevoer IS
   PORT( 
      aan_uit       : IN     std_logic;
      clk           : IN     std_logic;
      go_toevoer    : IN     std_logic;
      w_hoog        : IN     std_logic;
      w_laag        : IN     std_logic;
      klep_open     : OUT    std_logic;
      toevoer_ready : OUT    std_logic
   );

-- Declarations

END Toevoer ;

--
-- VHDL Architecture Wasmachine.Toevoer.Toevoer
--
-- Created:
--          by - Perij.UNKNOWN (LAPTOP-Q0P13GKH)
--          at - 13:39:07 05/03/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.1 Built on 21 Jan 2022 at 13:00:30
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE Toevoer OF Toevoer IS

   TYPE STATE_TYPE IS (
      idle,
      s0
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      aan_uit
   )
   -----------------------------------------------------------------
   BEGIN
      IF (aan_uit = '0') THEN
         current_state <= idle;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      go_toevoer,
      w_hoog
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN idle => 
            IF (go_toevoer = '1' AND w_hoog = '0') THEN 
               next_state <= s0;
            ELSIF (go_toevoer = '0') THEN 
               next_state <= idle;
            ELSE
               next_state <= idle;
            END IF;
         WHEN s0 => 
            IF (w_hoog = '0') THEN 
               next_state <= s0;
            ELSIF (w_hoog = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= s0;
            END IF;
         WHEN OTHERS =>
            next_state <= idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN idle => 
            toevoer_ready <= '1';
         WHEN s0 => 
            toevoer_ready <= '0' ;
            klep_open <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END Toevoer;
